{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoStatus","actions","todo","type","payload","currentTodoReducer","state","action","status","query","defaultState","filterReducer","todosActions","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectedTodo","visibleTodos","ALL","ACTiVE","completed","COMPLETED","todoTitleCheck","title","toLowerCase","includes","todoIdCheck","id","className","map","isTodoSelected","onClick","classNames","TodoFilter","onSubmit","event","preventDefault","onChange","value","target","filterActions","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","loadUserFromServer","a","userId","useEffect","cn","href","email","name","App","isLoading","setIsLoading","loadTodosFromServer","todosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0428523.chunk.js","sourcesContent":["export type Status = 'all' | 'active' | 'completed';\nexport enum TodoStatus {\n  ALL = 'all',\n  ACTiVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\ntype Action = SetStatusAction | SetQueryAction;\n\nexport const actions = { setStatus, setQuery };\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\nconst defaultState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: State = defaultState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype LoadTodoAction = {\n  type: 'todos/LOAD';\n  payload: Todo[];\n};\n\nconst loadTodos = (todos: Todo[]): LoadTodoAction => ({\n  type: 'todos/LOAD',\n  payload: todos,\n});\n\nexport const todosActions = { loadTodos };\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: LoadTodoAction,\n) : Todo[] => {\n  switch (action.type) {\n    case 'todos/LOAD':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { TodoStatus } from '../../types/Status';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const filter = useAppSelector(state => state.filter);\n  const todos = useAppSelector(state => state.todos);\n\n  const visibleTodos: Todo[] = todos\n    .filter(todo => {\n      switch (filter.status) {\n        case TodoStatus.ALL:\n          return todo;\n        case TodoStatus.ACTiVE:\n          return !todo.completed;\n        case TodoStatus.COMPLETED:\n          return todo.completed;\n        default:\n          return todo;\n      }\n    }).filter(todo => {\n      const todoTitleCheck = todo.title.toLowerCase()\n        .includes(filter.query.toLowerCase());\n      const todoIdCheck = todo.id === +filter.query;\n\n      return todoTitleCheck || todoIdCheck;\n    });\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {visibleTodos.map(todo => {\n          const isTodoSelected = todo === selectedTodo;\n\n          return (\n            <tr data-cy=\"todo\" key={todo.id}>\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={todo.completed\n                  ? 'has-text-success'\n                  : 'has-text-danger'}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => dispatch(actions.setTodo(todo))}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames('far', {\n                      'fa-eye-slash': isTodoSelected,\n                      'fa-eye': !isTodoSelected,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { TodoStatus } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const filter = useAppSelector(state => state.filter);\n  const { query } = filter;\n\n  const handlStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    if (value === 'all' || value === 'active' || value === 'completed') {\n      dispatch(filterActions.setStatus(value));\n    }\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => {\n        event.preventDefault();\n      }}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handlStatusChange}\n          >\n            <option value={TodoStatus.ALL}>All</option>\n            <option value={TodoStatus.ACTiVE}>Active</option>\n            <option value={TodoStatus.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => dispatch(\n            filterActions.setQuery(event.target.value),\n          )}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              aria-label=\"clear\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.setQuery(''))}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const loadUserFromServer = async () => {\n    if (currentTodo) {\n      setUser(await getUser(currentTodo?.userId));\n    }\n  };\n\n  useEffect(() => {\n    loadUserFromServer();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(actions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={cn(\n                {\n                  'has-text-success': currentTodo?.completed,\n                  'has-text-danger': !currentTodo?.completed,\n                },\n              )}\n              >\n                {currentTodo?.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const loadTodosFromServer = async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(todosActions.loadTodos(todosFromServer));\n      setIsLoading(false);\n    } catch {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTodosFromServer();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (\n                  <Loader />\n                )\n                : (\n                  <TodoList />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo\n        && (\n          <TodoModal />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}